def remote = [:]
pipeline {  
    agent any
    options {
        buildDiscarder logRotator(
                    daysToKeepStr: '16',
                    numToKeepStr: '10'
            )
    }
    environment {
        WEBLOGIC_CREDENTIAL = credentials('weblogic-console-user')
        
    }  
    stages {
        // stage('Test'){
        //     when { anyOf { branch 'develop';  branch 'stage'; branch 'master' } }
        //     agent {
        //         label 'docker'
        //     } 
        //     steps {
        //         sh 'docker run --rm -v /root/.m2:/root/.m2 -v $PWD/Back:/app -w /app maven:3-alpine mvn test'
        //         stash includes: 'Back/target/', name: 'mysrc'
        //     }
        // }

        stage("Build") {
            when { anyOf { branch 'develop'; branch 'stage'; branch 'master' } }
            agent {
                label 'maven385java8' 
            }
            steps {
                sh '''
                    cd Back
                    mvn clean install
                    ls -la target
                '''
                stash includes: 'Back/dist/', name: 'artefact'
            }
        }
        //Setea las variables almacenas en el arhivo .JSON
        stage('Set variables'){
            agent {
                label 'master' 
            }
            when { anyOf { branch 'develop'; branch 'stage'; branch 'master' } }
            steps{
                script{
                    
                   JENKINS_FILE = readJSON file: 'Jenkinsfile.json';
                   urlWlBirc  = JENKINS_FILE[BRANCH_NAME]['urlWlBirc'];
                   idUserANDPassWlBirc = JENKINS_FILE[BRANCH_NAME]['idUserANDPassWlBirc'];
                   artifactNameWlBirc = JENKINS_FILE[BRANCH_NAME]['artifactNameWlBirc'];
                   domainWlBirc = JENKINS_FILE[BRANCH_NAME]['domainWlBirc'];
                   pathwlBirc = JENKINS_FILE[BRANCH_NAME]['pathwlBirc'];
                   clusterWlBirc = JENKINS_FILE[BRANCH_NAME]['clusterWlBirc'];
                   extension = JENKINS_FILE[BRANCH_NAME]['extension'];

                   remote.name = 'birc'
                   remote.host = JENKINS_FILE[BRANCH_NAME]['serverWlSshBirc']
                   remote.port = JENKINS_FILE[BRANCH_NAME]['puertoWlSshBirc']
                   remote.allowAnyHosts = true 
                   remote.pty = true
                }
            }
        }
        // stage('Stop App'){
        //     agent {
        //         label 'master' 
        //     }
        //     when { anyOf { branch 'develop'; branch 'stage'; branch 'master' } } 
        //     steps{
        //         script{
        //             withCredentials([usernamePassword(credentialsId: 'weblogic-ssh-user', passwordVariable: 'password', usernameVariable: 'userName')]) {
        //                 remote.user = userName
        //                 remote.password = password
        //             }

        //             try{
        //                 sshCommand remote: remote, command: "cd ${domainWlBirc} && . ./setDomainEnv.sh ENV && java weblogic.Deployer -adminurl ${urlWlBirc} -username ${WEBLOGIC_CREDENTIAL_USR} -password ${WEBLOGIC_CREDENTIAL_PSW} -stop -name $artifactNameWlBirc"
        //                 statusCodeStop='success';
        //             } catch (err) {
        //                 statusCodeStop='failure';
        //                 statusCodeUndeploy='failure';   
        //                 echo "Error al parar la aplicacion"
        //             }
        //         }
        //     }
        //     post {
        //         success {
        //             println "Stage Stop App <<<<<< success >>>>>>"
        //         }
        //         unstable {
        //             println "Stage Stop App <<<<<< unstable >>>>>>"    
        //             script{
        //                 statusCodeStop='unstable';
        //                 statusCodeUndeploy='failure';
        //             }              
        //         }
        //         failure {
        //             println "Stage Stop App <<<<<< failure >>>>>>"
        //             script{
        //                 statusCodeStop='failure';
        //                 statusCodeUndeploy='failure';
        //             }
        //         }
        //     }   
               
        // }

        // stage('Undeploy'){
        //    agent {
        //         label 'master' 
        //    }
        //    when { anyOf { branch 'devops';  branch 'stage'; branch 'master' } } 
        //    steps{
        //        //Manejo del status code de este stage
        //         script{
        //             echo "Estatus Code Stage Anterior(Stop App): ${statusCodeStop}";
        //             if( statusCodeStop == 'success' ){
        //                 sshCommand remote: remote, command: "cd ${domainWlBirc} && . ./setDomainEnv.sh ENV && java weblogic.Deployer -adminurl $urlWlBirc -username ${WEBLOGIC_CREDENTIAL_USR} -password ${WEBLOGIC_CREDENTIAL_PSW} -undeploy -name ${artifactNameWlBirc} -targets ${clusterWlBirc} -usenonexclusivelock -graceful -ignoresessions"
        //             } else {
        //                 ///validar que en el pipe line no salga en verde 
        //                 echo "Sin artefacto para hacer undeploy"
        //             }
        //         }
        //     }
        //     post {
        //        success {
        //             println "Stage Undeploy <<<<<< success >>>>>>"
        //             script{
        //                 if( statusCodeStop == 'success' ){
        //                     statusCodeUndeploy='success';
        //                 }else{
        //                     statusCodeUndeploy='failure';
        //                 }
        //             }
        //         }
        //         unstable {
        //             script{
        //                 statusCodeUndeploy='unstable';
        //             } 
        //             println "Stage Undeploy <<<<<< unstable >>>>>>"
        //        }
        //        failure {
        //             println "Stage Undeploy <<<<<< failure >>>>>>"   
        //             script{
        //                 if( statusCodeStop == 'success' ){
        //                     echo "Start App";
        //                     sshCommand remote: remote, command:"cd ${domainWlBirc} && . ./setDomainEnv.sh ENV && java weblogic.Deployer -adminurl ${urlWlBirc} -username ${WEBLOGIC_CREDENTIAL_USR} -password ${WEBLOGIC_CREDENTIAL_PSW} -start -name ${artifactNameWlBirc}"
                            
        //                     autoCancelled = true
        //                     error('Error al hacer undeploy se inicia de nuevo el artefacto')
        //                 }    

        //                 statusCodeUndeploy='failure';
        //             }
        //         }
        //     }              
        // }
        // stage('Deploy'){      
        //     agent {
        //         label 'master' 
        //     }
        //     when { anyOf { branch 'devops';  branch 'stage'; branch 'master' } } 
        //     steps{
        //         catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        //             script{
        //                 if( (statusCodeStop == 'success' && statusCodeUndeploy == 'success') || statusCodeStop != 'success' ){    
        //                     echo "Copy ear to Server Web Logic";
        //                     unstash 'artefact'
        //                     sshPut remote: remote, from: "pipelineFiles/antWithWebLogic/BackANT/Back/dist/${artifactNameWlBirc}.${extension}", into: "/home/devops/applications/birc/DeploysTemp/${BRANCH_NAME}/"
        //                     echo "${pathwlBirc}/DeploysTemp/${BRANCH_NAME}"
                            
        //                     sshCommand remote: remote, sudo:true, command:"mv /home/devops/applications/birc/DeploysTemp/${BRANCH_NAME}/${artifactNameWlBirc}.${extension} ${pathwlBirc}/DeploysTemp/${BRANCH_NAME}"
        //                     sshCommand remote: remote, sudo:true, command:"chown  wlogic12c:oinstall ${pathwlBirc}/DeploysTemp/${BRANCH_NAME}/${artifactNameWlBirc}.${extension}"

        //                     sshCommand remote: remote, command:"cd ${domainWlBirc} && . ./setDomainEnv.sh ENV && java weblogic.Deployer -adminurl ${urlWlBirc} -username ${WEBLOGIC_CREDENTIAL_USR} -password ${WEBLOGIC_CREDENTIAL_PSW} -deploy -source ${pathwlBirc}/DeploysTemp/${BRANCH_NAME}/${artifactNameWlBirc}.${extension} -targets ${clusterWlBirc} -usenonexclusivelock"
        //                 }
        //             }
        //         }
        //     }
        //     post {
        //         success {
        //             println "Stage Deploy <<<<<< success >>>>>>"
        //             script{
        //                 statusCode='success';
        //             }    

        //             echo "backup ";
        //             ///validar la existenia de un artefacto al cual se le deva crear un backups
        //             sshCommand remote: remote, sudo: true, command:"test -f ${pathwlBirc}/Deploy/${JOB_BASE_NAME}/${artifactNameWlBirc}.${extension} && sudo mv ${pathwlBirc}/Deploy/${JOB_BASE_NAME}/${artifactNameWlBirc}.${extension} ${pathwlBirc}/DeploysHistory/${JOB_BASE_NAME}/${artifactNameWlBirc}_`date +\"%Y-%m-%d-%Y_%H:%M\"`.${extension} || echo \"No se encontro artefacto para realizar backup\""

        //             sshCommand remote: remote, sudo: true, command:"mv ${pathwlBirc}/DeploysTemp/${JOB_BASE_NAME}/${artifactNameWlBirc}.${extension}  ${pathwlBirc}/Deploy/${JOB_BASE_NAME}"
                    
        //             sshCommand remote: remote, sudo: true, command:"rm -rf ${pathwlBirc}/DeploysTemp/${JOB_BASE_NAME}/${artifactNameWlBirc}.${extension}"
        //         }
        //         unstable {
        //             println "Stage Deploy <<<<<< unstable >>>>>>"
        //             script{
        //                 statusCode='unstable';
        //             }
        //         }
        //         failure {
        //             println "Stage Deploy <<<<<< failure >>>>>>"
                
        //             script{
        //                 if( statusCodeStop == 'success' && statusCodeUndeploy == 'success' ){

        //                     echo "2. desplegar de la carpeta deploy";
        //                     sshCommand remote: remote, command:"cd ${domainWlBirc} && . ./setDomainEnv.sh ENV && java weblogic.Deployer -adminurl ${urlWlBirc} -username ${WEBLOGIC_CREDENTIAL_USR} -password ${WEBLOGIC_CREDENTIAL_PSW} -deploy -source ${pathwlBirc}/Deploy/${JOB_BASE_NAME}/${artifactNameWlBirc}.${extension} -targets ${clusterWlBirc} -usenonexclusivelock"
                            
        //                     //validar la necesidad de realizar el start
        //                     //echo "3. start a la aplicación";
        //                     //sshCommand remote: remote, command:"cd ${domainWlBirc} && . ./setDomainEnv.sh ENV && java weblogic.Deployer -adminurl ${urlWlBirc} -username ${WEBLOGIC_CREDENTIAL_USR} -password ${WEBLOGIC_CREDENTIAL_PSW} -start -name ${artifactNameWlBirc}"
                            
        //                 }else if( statusCodeStop == 'success' && statusCodeUndeploy != 'success' ){
        //                     echo "No se pudo desplegar verificar que el ambiente se encuentre estable con la version anterior";
                        
        //                 }else if( statusCodeStop != 'success'){
        //                     echo "No se pudo desplegar, por favor verificar por que no se encontro un artefacto inicial para restaurar";
        //                 }
                        
        //                 statusCode='failure';
        //             }
        //         }
        //     }
                
        // } 

    }
    post {         
        always{
            echo "Enviar logs...";
        }
        //Manejo de las execepciones con envio de notificacion por medio de slack  segun del status que coresponda.
        success{
            script{
                if( "${BRANCH_NAME}" == "devops" || "${BRANCH_NAME}" == "stage" || "${BRANCH_NAME}" == "master" ){
                    slackSend color: '#90FF33', message: "El despliegue en ${BRANCH_NAME} \n finalizo con estado: success  \n Puedes ver los logs en: ${env.BUILD_URL}console \n app: http://${remote.host}:7001/FACTURAELECTRONICA/";

                }
            }
        }
        unstable {
            script{
                if( "${BRANCH_NAME}" == "develop" || "${BRANCH_NAME}" == "stage" || "${BRANCH_NAME}" == "master" ){
                    slackSend color: '#FFA500', message: "El despliegue en ${BRANCH_NAME} \n finalizo con estado: unstable \n Puedes ver los logs en: ${env.BUILD_URL}console \n app: http://${remote.host}:7001/FACTURAELECTRONICA/";
                }
            }
        }
        failure{
            script{
                if( "${BRANCH_NAME}" == "develop" || "${BRANCH_NAME}" == "stage" || "${BRANCH_NAME}" == "master" ){
                    slackSend color: '#FF4233', message: "El despliegue en ${BRANCH_NAME} \n finalizo con estado: failure  \n Puedes ver los logs en: ${env.BUILD_URL}console \n app: http://${remote.host}:7001/FACTURAELECTRONICA/";
                }
            }
        }  
    }      
}
